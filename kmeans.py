# -*- coding: utf-8 -*-
"""Kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gQyru63FOFj77NRRlzFueW1xXybSXVZg

Importação metodo KMeans
"""

import numpy as np
from matplotlib import pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
from sklearn import metrics 
from scipy.spatial.distance import cdist
import math

"""Geração do dataset"""

dataset,y = make_blobs(n_samples=500, centers=20, random_state=999)
plt.scatter(dataset[:,0], dataset[:,1])

plt.grid()

"""Aplicação do metódo K-Means"""

kmeans = KMeans (n_clusters=5, init = 'k-means++', max_iter = 300, n_init = 10)
pred_y = kmeans.fit_predict(dataset)
plt.scatter(dataset[:,0], dataset[:,1])

plt.grid()

plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1], s=70, c='red')

"""Elbow Method para definição do número de clusters ideal"""

def optimal_number_of_clusters(wcss):
    x1, y1 = 1, wcss[0]
    x2, y2 = 20, wcss[len(wcss)-1]

    distances = []
    for i in range(len(wcss)):
        x0 = i+2
        y0 = wcss[i]
        numerator = abs((y2-y1)*x0 - (x2-x1)*y0 + x2*y1 - y2*x1)
        denominator = math.sqrt((y2 - y1)**2 + (x2 - x1)**2)
        distances.append(numerator/denominator)
    
    return distances.index(max(distances)) + 2

wcss = []

for i in range (1,20):
    kmeans = KMeans (n_clusters=i, init = 'k-means++', max_iter = 300, n_init = 10)
    kmeans.fit(dataset)
    wcss.append(kmeans.inertia_)
    n = optimal_number_of_clusters(wcss)
print(n)

plt.plot(range(1,20),wcss)
plt.title('Elbow Method')
plt.xlabel('Numer of Cluster')
plt.ylabel('WCSS')
plt.show()